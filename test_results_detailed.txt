============================= test session starts ==============================
platform linux -- Python 3.12.5, pytest-8.3.2, pluggy-1.5.0 -- /home/shaun/venvs/venv-srt-agentic-api/bin/python
cachedir: .pytest_cache
rootdir: /home/shaun/repos/srt-agentic-api
configfile: pytest.ini
plugins: asyncio-0.24.0, cov-5.0.0, anyio-4.4.0
asyncio: mode=Mode.AUTO, default_loop_scope=None
collecting ... Python version: 3.12.5 (main, Aug 19 2024, 12:20:56) [GCC 11.4.0]
Python path: ['/home/shaun/repos/srt-agentic-api', '/home/shaun/repos/srt-agentic-api', '/home/shaun/venvs/venv-srt-agentic-api/bin', '/home/shaun/.pyenv/versions/3.12.5/lib/python312.zip', '/home/shaun/.pyenv/versions/3.12.5/lib/python3.12', '/home/shaun/.pyenv/versions/3.12.5/lib/python3.12/lib-dynload', '/home/shaun/venvs/venv-srt-agentic-api/lib/python3.12/site-packages']
Current working directory: /home/shaun/repos/srt-agentic-api
Contents of current directory: ['app', '.github', 'data', 'requirements-testing.txt', 'docker-compose.yml', 'Dockerfile', 'pytest.ini', '.aidigestignore', 'requirements.txt', 'start-assistant.sh', '.python-version', '.cursorrules', 'requirements-docgen.txt', '.env', '.env.test', '.idea', '.gitignore', 'logs', 'TESTING.md', '.env.example', 'docs', 'README.md', '.git', 'docker-compose-replicaset.yml', 'test_results_detailed.txt', 'examples', 'tests', 'project-update.sh', '.pytest_cache', '.cursorignore']
Initializing FastAPI app
collected 120 items

tests/integration/test_main.py::test_read_main ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_lifecycle ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_add_and_get ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_search ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_search_relevance ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_delete ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_get_recent ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_get_memories_older_than ERROR
tests/integration/test_redis_memory_integration.py::test_redis_memory_cleanup ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_lifecycle ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_add ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_add_and_get ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_search ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_delete ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_get_recent ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_get_memories_older_than ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_cleanup ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_error_handling ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_search_with_filters ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_search_relevance ERROR
tests/integration/test_vector_memory_integration.py::test_vector_memory_edge_cases ERROR
tests/unit/api/endpoints/test_memory.py::test_add_memory ERROR
tests/unit/api/endpoints/test_memory.py::test_retrieve_memory ERROR
tests/unit/api/endpoints/test_memory.py::test_search_memory ERROR
tests/unit/api/endpoints/test_memory.py::test_memory_router_export ERROR
tests/unit/api/endpoints/test_memory.py::test_invalid_memory_operation ERROR
tests/unit/api/endpoints/test_memory.py::test_missing_agent_id ERROR
tests/unit/api/models/test_message_models.py::test_message_request ERROR
tests/unit/api/models/test_message_models.py::test_function_call ERROR
tests/unit/api/models/test_message_models.py::test_message_response ERROR
tests/unit/api/models/test_message_models.py::test_message_history_request ERROR
tests/unit/api/models/test_message_models.py::test_message_history_item ERROR
tests/unit/api/models/test_message_models.py::test_message_history_response ERROR
tests/unit/api/models/test_message_models.py::test_message_request_validation ERROR
tests/unit/api/models/test_message_models.py::test_message_history_request_validation ERROR
tests/unit/api/test_agent.py::test_create_agent ERROR
tests/unit/api/test_agent.py::test_create_agent_validation_error ERROR
tests/unit/api/test_agent.py::test_create_agent_internal_error ERROR
tests/unit/api/test_agent.py::test_get_agent ERROR
tests/unit/api/test_agent.py::test_update_agent ERROR
tests/unit/api/test_agent.py::test_delete_agent ERROR
tests/unit/api/test_agent.py::test_list_agents ERROR
tests/unit/api/test_function.py::test_register_function ERROR
tests/unit/api/test_function.py::test_get_function ERROR
tests/unit/api/test_function.py::test_update_function ERROR
tests/unit/api/test_function.py::test_delete_function ERROR
tests/unit/api/test_function.py::test_list_functions ERROR
tests/unit/api/test_function.py::test_execute_function ERROR
tests/unit/api/test_function.py::test_execute_nonexistent_function ERROR
tests/unit/api/test_memory.py::test_advanced_search ERROR
tests/unit/api/test_memory.py::test_add_memory ERROR
tests/unit/api/test_memory.py::test_retrieve_memory ERROR
tests/unit/api/test_memory.py::test_search_memory ERROR
tests/unit/api/test_memory.py::test_delete_memory ERROR
tests/unit/api/test_memory.py::test_memory_operation ERROR
tests/unit/api/test_memory.py::test_add_long_term_memory ERROR
tests/unit/api/test_memory.py::test_search_long_term_memory ERROR
tests/unit/api/test_memory.py::test_send_message_invalid_agent ERROR
tests/unit/api/test_message.py::test_send_message ERROR
tests/unit/api/test_message.py::test_get_message_history ERROR
tests/unit/api/test_message.py::test_clear_message_history ERROR
tests/unit/api/test_message.py::test_get_latest_message ERROR
tests/unit/api/test_message.py::test_send_message_invalid_agent ERROR
tests/unit/core/memory/test_memory_system.py::test_memory_system_initialization ERROR
tests/unit/core/memory/test_memory_system.py::test_add_short_term_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_add_long_term_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_retrieve_short_term_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_retrieve_long_term_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_search ERROR
tests/unit/core/memory/test_memory_system.py::test_delete_short_term_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_delete_long_term_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_perform_operation_add ERROR
tests/unit/core/memory/test_memory_system.py::test_consolidate_memories ERROR
tests/unit/core/memory/test_memory_system.py::test_forget_old_memories ERROR
tests/unit/core/memory/test_memory_system.py::test_memory_system_error_handling ERROR
tests/unit/core/memory/test_memory_system.py::test_memory_system_close ERROR
tests/unit/core/memory/test_memory_system.py::test_memory_system_search_with_errors ERROR
tests/unit/core/memory/test_memory_system.py::test_memory_system_partial_search_success ERROR
tests/unit/core/memory/test_memory_system.py::test_add_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_retrieve_memory ERROR
tests/unit/core/memory/test_memory_system.py::test_search_memory ERROR
tests/unit/core/memory/test_redis_connections.py::test_redis_connection_initialization ERROR
tests/unit/core/memory/test_redis_connections.py::test_redis_connection_initialization_retry ERROR
tests/unit/core/memory/test_redis_connections.py::test_redis_connection_initialization_failure ERROR
tests/unit/core/memory/test_redis_connections.py::test_redis_connection_get_connection ERROR
tests/unit/core/memory/test_redis_connections.py::test_redis_connection_ensure_connection ERROR
tests/unit/core/memory/test_redis_connections.py::test_redis_connection_close ERROR
tests/unit/core/memory/test_redis_connections.py::test_redis_connection_too_many_connections ERROR
tests/unit/core/memory/test_redis_memory.py::test_redis_memory_lifecycle ERROR
tests/unit/core/memory/test_redis_memory.py::test_redis_memory_add_and_get ERROR
tests/unit/core/memory/test_redis_memory.py::test_redis_memory_search ERROR
tests/unit/core/memory/test_redis_memory.py::test_redis_memory_delete ERROR
tests/unit/core/memory/test_redis_memory.py::test_redis_memory_get_recent ERROR
tests/unit/core/memory/test_redis_memory.py::test_redis_memory_get_memories_older_than ERROR
tests/unit/core/memory/test_vector_memory.py::test_vector_memory_lifecycle ERROR
tests/unit/core/memory/test_vector_memory.py::test_vector_memory_add_and_get ERROR
tests/unit/core/memory/test_vector_memory.py::test_vector_memory_search ERROR
tests/unit/core/memory/test_vector_memory.py::test_vector_memory_delete ERROR
tests/unit/core/memory/test_vector_memory.py::test_vector_memory_get_recent ERROR
tests/unit/core/memory/test_vector_memory.py::test_vector_memory_get_memories_older_than ERROR
tests/unit/core/memory/test_vector_memory.py::test_vector_memory_error_handling ERROR
tests/unit/core/test_agent.py::test_advanced_search ERROR
tests/unit/core/test_agent.py::test_add_memory ERROR
tests/unit/core/test_agent.py::test_retrieve_memory ERROR
tests/unit/core/test_agent.py::test_search_memory ERROR
tests/unit/core/test_agent.py::test_delete_memory ERROR
tests/unit/core/test_agent.py::test_memory_operation ERROR
tests/unit/core/test_agent.py::test_process_message ERROR
tests/unit/core/test_agent.py::test_execute_function ERROR
tests/unit/core/test_agent.py::test_get_available_functions ERROR
tests/unit/core/test_agent.py::test_add_function ERROR
tests/unit/core/test_agent.py::test_remove_function ERROR
tests/unit/core/test_agent.py::test_get_function_by_name ERROR
tests/unit/core/test_agent.py::test_prepare_prompt ERROR
tests/unit/core/test_agent.py::test_parse_response ERROR
tests/unit/core/test_llm_provider.py::test_llm_provider_fallback ERROR
tests/unit/core/test_llm_provider.py::test_llm_provider_all_fail ERROR
tests/unit/core/test_llm_provider.py::test_llm_provider_first_succeeds ERROR
tests/unit/test_async_setup.py::test_redis_memory_async_setup ERROR
tests/unit/test_async_setup.py::test_vector_memory_async_setup ERROR
tests/unit/test_async_setup.py::test_vector_memory_async_setup ERROR

==================================== ERRORS ====================================
_______________________ ERROR at setup of test_read_main _______________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_main.py, line 6
  async def test_read_main(async_client: AsyncClient):
      response = await async_client.get("/")
      assert response.status_code == 200
      assert response.json() == {"message": "Welcome to SolidRusT Agentic API"}
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_main.py::<event_loop>, tests/integration::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
------------------------------ Captured log setup ------------------------------
INFO     memory:connection.py:39 Redis connection pool established for agent: 00000000-0000-0000-0000-000000000000
________________ ERROR at setup of test_redis_memory_lifecycle _________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 17
  @pytest.mark.asyncio
  async def test_redis_memory_lifecycle(redis_memory):
      assert redis_memory.connection.redis is not None
      await redis_memory.close()
      assert redis_memory.connection.redis is None
      await redis_memory.initialize()
      assert redis_memory.connection.redis is not None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
------------------------------ Captured log setup ------------------------------
INFO     memory:connection.py:39 Redis connection pool established for agent: 12345678-1234-5678-1234-567812345678
INFO     memory:redis_memory.py:26 Redis memory initialized for agent: 12345678-1234-5678-1234-567812345678
_______________ ERROR at setup of test_redis_memory_add_and_get ________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 25
  @pytest.mark.asyncio
  async def test_redis_memory_add_and_get(redis_memory):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={"key": "value"},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await redis_memory.add(memory_entry)
      assert isinstance(memory_id, str)

      retrieved_entry = await redis_memory.get(memory_id)
      assert retrieved_entry is not None
      assert retrieved_entry.content == memory_entry.content
      assert retrieved_entry.metadata == memory_entry.metadata
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_redis_memory_search __________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 40
  @pytest.mark.asyncio
  async def test_redis_memory_search(redis_memory):
      # Add test data
      for i in range(10):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={"index": i},
              context=MemoryContext(context_type="test", timestamp=datetime.now() - timedelta(minutes=i), metadata={})
          )
          await redis_memory.add(memory_entry)

      # Test basic search
      query = AdvancedSearchQuery(query="Test content", max_results=5)
      results = await redis_memory.search(query)
      assert len(results) == 5
      assert all("Test content" in result["memory_entry"].content for result in results)

      # Test search with context type filter
      query = AdvancedSearchQuery(query="Test content", context_type="test", max_results=5)
      results = await redis_memory.search(query)
      assert len(results) == 5
      assert all(result["memory_entry"].context.context_type == "test" for result in results)

      # Test search with time range filter
      time_range = {
          "start": datetime.now() - timedelta(minutes=6),
          "end": datetime.now()
      }
      query = AdvancedSearchQuery(query="Test content", time_range=time_range, max_results=10)
      results = await redis_memory.search(query)
      assert len(results) == 6
      assert all(time_range["start"] <= result["memory_entry"].context.timestamp <= time_range["end"] for result in results)

      # Test search with metadata filter
      query = AdvancedSearchQuery(query="Test content", metadata_filters={"index": 3}, max_results=5)
      results = await redis_memory.search(query)
      assert len(results) == 1
      assert results[0]["memory_entry"].metadata["index"] == 3

      # Test search with no results
      query = AdvancedSearchQuery(query="Nonexistent content", max_results=5)
      results = await redis_memory.search(query)
      assert len(results) == 0
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________ ERROR at setup of test_redis_memory_search_relevance _____________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 85
  @pytest.mark.asyncio
  async def test_redis_memory_search_relevance(redis_memory):
      # Add test data with varying relevance
      entries = [
          "The quick brown fox jumps over the lazy dog",
          "A quick brown dog jumps over the lazy fox",
          "The lazy dog sleeps while the quick fox jumps",
          "A brown fox quickly jumps over a dog",
          "The dog is lazy and the fox is quick"
      ]
      for entry in entries:
          memory_entry = MemoryEntry(
              content=entry,
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
          )
          await redis_memory.add(memory_entry)

      query = AdvancedSearchQuery(query="quick brown fox", max_results=5)
      results = await redis_memory.search(query)

      assert len(results) == 5
      # Check if results are sorted by relevance
      relevance_scores = [result["relevance_score"] for result in results]
      assert relevance_scores == sorted(relevance_scores, reverse=True)
      # Check if the most relevant result is first
      assert "The quick brown fox" in results[0]["memory_entry"].content
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_redis_memory_delete __________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 113
  @pytest.mark.asyncio
  async def test_redis_memory_delete(redis_memory):
      memory_entry = MemoryEntry(
          content="Test content to delete",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await redis_memory.add(memory_entry)

      await redis_memory.delete(memory_id)
      retrieved_entry = await redis_memory.get(memory_id)
      assert retrieved_entry is None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_redis_memory_get_recent ________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 126
  @pytest.mark.asyncio
  async def test_redis_memory_get_recent(redis_memory):
      for i in range(10):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now() - timedelta(minutes=i), metadata={})
          )
          await redis_memory.add(memory_entry)

      recent_memories = await redis_memory.get_recent(5)
      assert len(recent_memories) == 5
      assert all("Test content" in memory["memory_entry"].content for memory in recent_memories)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________ ERROR at setup of test_redis_memory_get_memories_older_than __________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 140
  @pytest.mark.asyncio
  async def test_redis_memory_get_memories_older_than(redis_memory):
      now = datetime.now()
      threshold = now - timedelta(hours=2)

      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=now - timedelta(hours=i), metadata={})
          )
          await redis_memory.add(memory_entry)

      old_memories = await redis_memory.get_memories_older_than(threshold)
      assert len(old_memories) == 3
      assert all(memory.context.timestamp < threshold for memory in old_memories)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_redis_memory_cleanup __________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_redis_memory_integration.py, line 157
  @pytest.mark.asyncio
  async def test_redis_memory_cleanup(redis_memory):
      memory_entry = MemoryEntry(
          content="Test cleanup content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      await redis_memory.add(memory_entry)

      await redis_memory.cleanup()

      recent_memories = await redis_memory.get_recent(10)
      assert len(recent_memories) == 0
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/fixtures::<event_loop>, tests/integration/test_redis_memory_integration.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_vector_memory_lifecycle ________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 26
  @pytest.mark.asyncio
  async def test_vector_memory_lifecycle(vector_memory):
      assert vector_memory.collection is not None
      await vector_memory.close()
      assert vector_memory.client is None

      await vector_memory.initialize()
      assert vector_memory.collection is not None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
___________________ ERROR at setup of test_vector_memory_add ___________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 36
  @pytest.mark.asyncio
  async def test_vector_memory_add(vector_memory):
      # Test successful add
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={"key": "value"},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await vector_memory.add(memory_entry)
      assert isinstance(memory_id, str)

      # Verify the memory was added
      result = await asyncio.to_thread(vector_memory.collection.get, ids=[memory_id])
      assert result['ids'][0] == memory_id
      assert result['documents'][0] == "Test content"
      assert result['metadatas'][0]['key'] == "value"

      # Test add before initialization
      uninit_vector_memory = VectorMemory("test_uninit")
      with pytest.raises(VectorMemoryError, match="VectorMemory not initialized"):
          await uninit_vector_memory.add(memory_entry)

      # Test ChromaDB failure
      with patch.object(vector_memory.collection, 'add', side_effect=Exception("ChromaDB error")):
          with pytest.raises(VectorMemoryError, match="Failed to add memory entry: ChromaDB error"):
              await vector_memory.add(memory_entry)

      # Test adding large content
      large_content = "x" * 1000000  # 1 million characters
      large_memory = MemoryEntry(
          content=large_content,
          metadata={},
          context=MemoryContext(context_type="large", timestamp=datetime.now(), metadata={})
      )
      large_id = await vector_memory.add(large_memory)
      assert isinstance(large_id, str)

      # Verify the large memory was added
      large_result = await asyncio.to_thread(vector_memory.collection.get, ids=[large_id])
      assert large_result['ids'][0] == large_id
      assert len(large_result['documents'][0]) == 1000000
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_vector_memory_add_and_get _______________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 79
  @pytest.mark.asyncio
  async def test_vector_memory_add_and_get(vector_memory):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={"key": "value"},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await vector_memory.add(memory_entry)
      assert isinstance(memory_id, str)

      retrieved_entry = await vector_memory.get(memory_id)
      assert retrieved_entry is not None
      assert retrieved_entry.content == memory_entry.content
      assert retrieved_entry.metadata == memory_entry.metadata
      assert retrieved_entry.context.context_type == memory_entry.context.context_type
      assert retrieved_entry.context.timestamp == memory_entry.context.timestamp
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_vector_memory_search __________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 97
  @pytest.mark.asyncio
  async def test_vector_memory_search(vector_memory):
      # Add test data
      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={"index": i},
              context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
          )
          await vector_memory.add(memory_entry)

      # Test normal search
      query = AdvancedSearchQuery(query="Test content", max_results=3)
      results = await vector_memory.search(query)

      assert len(results) == 3
      assert all("Test content" in result["memory_entry"].content for result in results)
      assert all(0 <= result["relevance_score"] <= 1 for result in results)

      # Test search with no results
      query_no_results = AdvancedSearchQuery(query="Nonexistent content", max_results=3)
      results_no_match = await vector_memory.search(query_no_results)

      assert len(results_no_match) == 0

      # Test search with metadata filter
      query_metadata = AdvancedSearchQuery(query="Test content", max_results=1, metadata_filters={"index": 2})
      results_metadata = await vector_memory.search(query_metadata)

      assert len(results_metadata) == 1
      assert results_metadata[0]["memory_entry"].metadata["index"] == 2
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_vector_memory_delete __________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 130
  @pytest.mark.asyncio
  async def test_vector_memory_delete(vector_memory):
      memory_entry = MemoryEntry(
          content="Test content to delete",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await vector_memory.add(memory_entry)

      await vector_memory.delete(memory_id)
      retrieved_entry = await vector_memory.get(memory_id)
      assert retrieved_entry is None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_vector_memory_get_recent ________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 144
  @pytest.mark.asyncio
  async def test_vector_memory_get_recent(vector_memory):
      for i in range(10):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now() - timedelta(minutes=i), metadata={})
          )
          await vector_memory.add(memory_entry)

      recent_memories = await vector_memory.get_recent(5)
      assert len(recent_memories) == 5
      assert all("Test content" in memory["memory_entry"].content for memory in recent_memories)

      # Check if memories are sorted by recency
      timestamps = [memory["memory_entry"].context.timestamp for memory in recent_memories]
      assert timestamps == sorted(timestamps, reverse=True)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________ ERROR at setup of test_vector_memory_get_memories_older_than _________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 163
  @pytest.mark.asyncio
  async def test_vector_memory_get_memories_older_than(vector_memory):
      now = datetime.now()
      threshold = now - timedelta(hours=2)

      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=now - timedelta(hours=i), metadata={})
          )
          await vector_memory.add(memory_entry)

      old_memories = await vector_memory.get_memories_older_than(threshold)
      assert len(old_memories) == 3
      assert all(memory.context.timestamp < threshold for memory in old_memories)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_vector_memory_cleanup _________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 181
  @pytest.mark.asyncio
  async def test_vector_memory_cleanup(vector_memory):
      # Add some test data
      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
          )
          await vector_memory.add(memory_entry)

      # Perform cleanup
      await vector_memory.cleanup()

      # Verify that all data has been removed
      recent_memories = await vector_memory.get_recent(10)
      assert len(recent_memories) == 0
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________ ERROR at setup of test_vector_memory_error_handling ______________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 200
  @pytest.mark.asyncio
  async def test_vector_memory_error_handling(vector_memory):
      with patch.object(vector_memory.collection, 'add', side_effect=Exception("ChromaDB error")):
          with pytest.raises(VectorMemoryError):
              await vector_memory.add(MemoryEntry(
                  content="Test error content",
                  metadata={},
                  context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
              ))
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
___________ ERROR at setup of test_vector_memory_search_with_filters ___________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 211
  @pytest.mark.asyncio
  async def test_vector_memory_search_with_filters(vector_memory):
      # Add test data with different context types and timestamps
      now = datetime.now()
      for i in range(10):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={"index": i},
              context=MemoryContext(
                  context_type="type_A" if i % 2 == 0 else "type_B",
                  timestamp=now - timedelta(hours=i),
                  metadata={}
              )
          )
          await vector_memory.add(memory_entry)

      # Test search with context type filter
      query = AdvancedSearchQuery(query="Test content", context_type="type_A", max_results=5)
      results = await vector_memory.search(query)
      assert len(results) == 5
      assert all(result["memory_entry"].context.context_type == "type_A" for result in results)

      # Test search with time range filter
      time_range = {
          "start": now - timedelta(hours=5),
          "end": now
      }
      query = AdvancedSearchQuery(query="Test content", time_range=time_range, max_results=10)
      results = await vector_memory.search(query)
      assert len(results) == 6
      assert all(
          time_range["start"] <= result["memory_entry"].context.timestamp <= time_range["end"] for result in results)

      # Test search with metadata filter
      query = AdvancedSearchQuery(query="Test content", metadata_filters={"index": 3}, max_results=5)
      results = await vector_memory.search(query)
      assert len(results) == 1
      assert results[0]["memory_entry"].metadata["index"] == 3
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________ ERROR at setup of test_vector_memory_search_relevance _____________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 251
  @pytest.mark.asyncio
  async def test_vector_memory_search_relevance(vector_memory):
      # Add test data with varying relevance
      entries = [
          "The quick brown fox jumps over the lazy dog",
          "A quick brown dog jumps over the lazy fox",
          "The lazy dog sleeps while the quick fox jumps",
          "A brown fox quickly jumps over a dog",
          "The dog is lazy and the fox is quick"
      ]
      for entry in entries:
          memory_entry = MemoryEntry(
              content=entry,
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
          )
          await vector_memory.add(memory_entry)

      query = AdvancedSearchQuery(query="quick brown fox", max_results=5)
      results = await vector_memory.search(query)

      assert len(results) == 5
      # Check if results are sorted by relevance
      relevance_scores = [result["relevance_score"] for result in results]
      assert relevance_scores == sorted(relevance_scores, reverse=True)
      # Check if the most relevant result is first
      assert "The quick brown fox" in results[0]["memory_entry"].content
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_vector_memory_edge_cases ________________
file /home/shaun/repos/srt-agentic-api/tests/integration/test_vector_memory_integration.py, line 280
  @pytest.mark.asyncio
  async def test_vector_memory_edge_cases():
      vector_memory = None
      try:
          collection_name = f"test_collection_{UUID(int=0)}"
          vector_memory = VectorMemory(collection_name)
          await vector_memory.initialize()

          # Test adding and retrieving an empty content memory
          empty_memory = MemoryEntry(
              content="",
              metadata={},
              context=MemoryContext(context_type="empty", timestamp=datetime.now(), metadata={})
          )
          empty_id = await vector_memory.add(empty_memory)
          retrieved_empty = await vector_memory.get(empty_id)
          assert retrieved_empty is not None
          assert retrieved_empty.content == ""

          # Test searching with an empty query
          empty_query = AdvancedSearchQuery(query="", max_results=5)
          empty_results = await vector_memory.search(empty_query)
          assert len(empty_results) <= 5  # Should return 5 results or less

          # Test getting recent memories when there are fewer than requested
          few_memories = await vector_memory.get_recent(100)
          assert len(few_memories) <= 100  # Should return all available memories without error

          # Test getting memories older than a future date
          future_date = datetime.now() + timedelta(days=1)
          future_memories = await vector_memory.get_memories_older_than(future_date)
          assert len(future_memories) == 0  # Should return an empty list

          # Test deleting a non-existent memory
          non_existent_id = str(UUID(int=0))
          await vector_memory.delete(non_existent_id)  # Should not raise an error

          # Test adding a memory with very large content
          large_content = "x" * 1000000  # 1 million characters
          large_memory = MemoryEntry(
              content=large_content,
              metadata={},
              context=MemoryContext(context_type="large", timestamp=datetime.now(), metadata={})
          )
          large_id = await vector_memory.add(large_memory)
          retrieved_large = await vector_memory.get(large_id)
          assert retrieved_large is not None
          assert len(retrieved_large.content) == 1000000

          # Test searching with complex query and filters
          complex_query = AdvancedSearchQuery(
              query="test",
              max_results=10,
              context_type="test",
              time_range={
                  "start": datetime.now() - timedelta(days=1),
                  "end": datetime.now()
              },
              metadata_filters={"key": "value"},
              relevance_threshold=0.5
          )
          complex_results = await vector_memory.search(complex_query)
          assert isinstance(complex_results, list)

          # Test concurrent operations
          async def concurrent_operation():
              memory = MemoryEntry(
                  content=f"Concurrent test {uuid4()}",
                  metadata={},
                  context=MemoryContext(context_type="concurrent", timestamp=datetime.now(), metadata={})
              )
              await vector_memory.add(memory)

          await asyncio.gather(*[concurrent_operation() for _ in range(10)])

          # Test error handling for ChromaDB failures
          with patch.object(vector_memory.collection, 'add', side_effect=Exception("ChromaDB error")):
              with pytest.raises(VectorMemoryError):
                  await vector_memory.add(MemoryEntry(
                      content="Error test",
                      metadata={},
                      context=MemoryContext(context_type="error", timestamp=datetime.now(), metadata={})
                  ))

      finally:
          # Ensure cleanup happens even if there's an error
          if vector_memory:
              await vector_memory.cleanup()
              await vector_memory.close()

          # Add a small delay to allow any background tasks to complete
      await asyncio.sleep(0.1)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/integration/test_vector_memory_integration.py::<event_loop>, tests::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________________ ERROR at setup of test_add_memory _______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/endpoints/test_memory.py, line 16
  def test_add_memory(agent_id):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_id, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/endpoints/test_memory.py::<event_loop>, tests/unit/api/endpoints::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________________ ERROR at setup of test_retrieve_memory ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/endpoints/test_memory.py, line 31
  def test_retrieve_memory(agent_id):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_id, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/endpoints/test_memory.py::<event_loop>, tests/unit/api/endpoints::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_search_memory _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/endpoints/test_memory.py, line 46
  def test_search_memory(agent_id):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_id, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/endpoints/test_memory.py::<event_loop>, tests/unit/api/endpoints::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_memory_router_export __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/endpoints/test_memory.py, line 62
  def test_memory_router_export():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_id, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/endpoints/test_memory.py::<event_loop>, tests/unit/api/endpoints::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_invalid_memory_operation ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/endpoints/test_memory.py, line 67
  def test_invalid_memory_operation(agent_id):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_id, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/endpoints/test_memory.py::<event_loop>, tests/unit/api/endpoints::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
___________________ ERROR at setup of test_missing_agent_id ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/endpoints/test_memory.py, line 76
  def test_missing_agent_id():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_id, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/endpoints/test_memory.py::<event_loop>, tests/unit/api/endpoints::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________________ ERROR at setup of test_message_request ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 13
  def test_message_request():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_function_call _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 24
  def test_function_call():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
___________________ ERROR at setup of test_message_response ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 32
  def test_message_response():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_message_history_request ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 47
  def test_message_history_request():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_message_history_item __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 58
  def test_message_history_item():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_message_history_response ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 72
  def test_message_history_response():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________ ERROR at setup of test_message_request_validation _______________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 90
  def test_message_request_validation():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________ ERROR at setup of test_message_history_request_validation ___________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/models/test_message_models.py, line 94
  def test_message_history_request_validation():
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/models/test_message_models.py::<event_loop>, tests/unit/api/models::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_create_agent ______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_agent.py, line 24
  async def test_create_agent(async_client: AsyncClient, auth_headers, mock_agent_manager):
      agent_data = AgentCreationRequest(
          agent_name="Test Agent",
          agent_config=AgentConfig(
              llm_providers=[
                  {
                      "provider_type": "mock",
                      "model_name": "mock-model"
                  }
              ],
              temperature=0.7,
              max_tokens=150,
              memory_config=MemoryConfig(
                  use_long_term_memory=True,
                  use_redis_cache=True
              )
          ),
          memory_config=MemoryConfig(
              use_long_term_memory=True,
              use_redis_cache=True
          ),
          initial_prompt="You are a helpful assistant."
      )

      mock_agent_manager.create_agent.return_value = UUID('12345678-1234-5678-1234-567812345678')

      response = await async_client.post("/agent/create", json=agent_data.dict(), headers=auth_headers)
      assert response.status_code == 201
      assert "agent_id" in response.json()
      assert response.json()["message"] == "Agent created successfully"

      mock_agent_manager.create_agent.assert_called_once_with(agent_data)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_agent_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_agent.py::<event_loop>, tests/unit/api::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________ ERROR at setup of test_create_agent_validation_error _____________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_agent.py, line 57
  async def test_create_agent_validation_error(async_client: AsyncClient, auth_headers, mock_agent_manager):
      invalid_agent_data = {
          "agent_name": "Test Agent",
          "agent_config": {},  # Invalid config
          "memory_config": {},
          "initial_prompt": "You are a helpful assistant."
      }

      response = await async_client.post("/agent/create", json=invalid_agent_data, headers=auth_headers)
      assert response.status_code == 422  # Unprocessable Entity
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_agent_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_agent.py::<event_loop>, tests/unit/api::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________ ERROR at setup of test_create_agent_internal_error ______________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_agent.py, line 68
  async def test_create_agent_internal_error(async_client: AsyncClient, auth_headers, mock_agent_manager):
      agent_data = AgentCreationRequest(
          agent_name="Test Agent",
          agent_config=AgentConfig(
              llm_providers=[
                  {
                      "provider_type": "mock",
                      "model_name": "mock-model"
                  }
              ],
              temperature=0.7,
              max_tokens=150,
              memory_config=MemoryConfig(
                  use_long_term_memory=True,
                  use_redis_cache=True
              )
          ),
          memory_config=MemoryConfig(
              use_long_term_memory=True,
              use_redis_cache=True
          ),
          initial_prompt="You are a helpful assistant."
      )

      mock_agent_manager.create_agent.side_effect = Exception("Internal error")

      response = await async_client.post("/agent/create", json=agent_data.dict(), headers=auth_headers)
      assert response.status_code == 500
      assert "Failed to create agent" in response.json()["detail"]
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_agent_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_agent.py::<event_loop>, tests/unit/api::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________________ ERROR at setup of test_get_agent _______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_agent.py, line 98
  async def test_get_agent(async_client: AsyncClient, auth_headers, test_agent):
      response = await async_client.get(f"/agent/{test_agent}", headers=auth_headers)
      assert response.status_code == 200
      agent = response.json()
      assert agent["agent_id"] == test_agent
      assert agent["name"] == "Test Agent"
      assert "llm_providers" in agent["config"]
      assert isinstance(agent["config"]["llm_providers"], list)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_agent_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_agent.py::<event_loop>, tests/unit/api::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_update_agent ______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_agent.py, line 107
  async def test_update_agent(async_client: AsyncClient, auth_headers, test_agent):
      update_data = {
          "agent_config": {
              "temperature": 0.8,
              "llm_providers": [
                  {
                      "provider_type": "openai",
                      "model_name": "gpt-4",
                      "api_key": "new-test-key"
                  }
              ]
          }
      }
      response = await async_client.patch(f"/agent/{test_agent}", json=update_data, headers=auth_headers)
      assert response.status_code == 200
      updated_agent = response.json()
      assert updated_agent["message"] == "Agent updated successfully"

      # Verify the update
      response = await async_client.get(f"/agent/{test_agent}", headers=auth_headers)
      agent = response.json()
      assert agent["config"]["temperature"] == 0.8
      assert agent["config"]["llm_providers"][0]["model_name"] == "gpt-4"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_agent_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_agent.py::<event_loop>, tests/unit/api::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_delete_agent ______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_agent.py, line 131
  async def test_delete_agent(async_client: AsyncClient, auth_headers, test_agent):
      response = await async_client.delete(f"/agent/{test_agent}", headers=auth_headers)
      assert response.status_code == 204

      # Verify the agent is deleted
      response = await async_client.get(f"/agent/{test_agent}", headers=auth_headers)
      assert response.status_code == 404
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_agent_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_agent.py::<event_loop>, tests/unit/api::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________________ ERROR at setup of test_list_agents ______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_agent.py, line 139
  async def test_list_agents(async_client: AsyncClient, auth_headers, test_agent):
      # Create a second agent to ensure we have at least two
      await test_create_agent(async_client, auth_headers)

      response = await async_client.get("/agent", headers=auth_headers)
      assert response.status_code == 200
      agents = response.json()
      assert isinstance(agents, list)
      assert len(agents) >= 2  # We should have at least the two agents we created
      for agent in agents:
          assert "agent_id" in agent
          assert "name" in agent
          assert "config" in agent
          assert "llm_providers" in agent["config"]
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_agent_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_agent.py::<event_loop>, tests/unit/api::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
___________________ ERROR at setup of test_register_function ___________________

request = <SubRequest 'test_agent' for <Coroutine test_register_function>>
kwargs = {'mock_function_manager': <MagicMock name='function_manager' id='139765182725440'>, 'mock_llm_provider': <AsyncMock sp...onfig(use_long_term_memory=True, use_redis_cache=True)), 'test_agent_id': UUID('12345678-1234-5678-1234-567812345678')}
func = <function test_agent at 0x7f1d9e3f5ee0>
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f1d9e1a27a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f1d9e1a3380>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()  # type: ignore[union-attr]
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:325: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_agent_id = UUID('12345678-1234-5678-1234-567812345678')
test_agent_config = AgentConfig(llm_providers=[LLMProviderConfig(provider_type='mock', model_name='mock-model', api_key=None, api_base=None)], temperature=0.7, max_tokens=150, memory_config=MemoryConfig(use_long_term_memory=True, use_redis_cache=True))
mock_function_manager = <MagicMock name='function_manager' id='139765182725440'>
mock_llm_provider = <AsyncMock spec='LLMProvider' id='139765164852480'>

    @pytest.fixture
    async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
        agent = Agent(
            agent_id=test_agent_id,
            name="Test Agent",
            config=test_agent_config,
            function_manager=mock_function_manager,
            llm_provider=mock_llm_provider
        )
>       await agent.initialize()
E       AttributeError: 'Agent' object has no attribute 'initialize'

tests/fixtures/agent_fixtures.py:29: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     memory:memory_system.py:33 MemorySystem initialized for agent: 12345678-1234-5678-1234-567812345678
INFO     agent:agent.py:45 Agent Test Agent (ID: 12345678-1234-5678-1234-567812345678) initialized
_____________________ ERROR at setup of test_get_function ______________________

request = <SubRequest 'test_agent' for <Coroutine test_get_function>>
kwargs = {'mock_function_manager': <MagicMock name='function_manager' id='139765185705648'>, 'mock_llm_provider': <AsyncMock sp...onfig(use_long_term_memory=True, use_redis_cache=True)), 'test_agent_id': UUID('12345678-1234-5678-1234-567812345678')}
func = <function test_agent at 0x7f1d9e3f5ee0>
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f1d9e1a3560>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f1ddfef59e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()  # type: ignore[union-attr]
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:325: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_agent_id = UUID('12345678-1234-5678-1234-567812345678')
test_agent_config = AgentConfig(llm_providers=[LLMProviderConfig(provider_type='mock', model_name='mock-model', api_key=None, api_base=None)], temperature=0.7, max_tokens=150, memory_config=MemoryConfig(use_long_term_memory=True, use_redis_cache=True))
mock_function_manager = <MagicMock name='function_manager' id='139765185705648'>
mock_llm_provider = <AsyncMock spec='LLMProvider' id='139765164863952'>

    @pytest.fixture
    async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
        agent = Agent(
            agent_id=test_agent_id,
            name="Test Agent",
            config=test_agent_config,
            function_manager=mock_function_manager,
            llm_provider=mock_llm_provider
        )
>       await agent.initialize()
E       AttributeError: 'Agent' object has no attribute 'initialize'

tests/fixtures/agent_fixtures.py:29: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     memory:memory_system.py:33 MemorySystem initialized for agent: 12345678-1234-5678-1234-567812345678
INFO     agent:agent.py:45 Agent Test Agent (ID: 12345678-1234-5678-1234-567812345678) initialized
____________________ ERROR at setup of test_update_function ____________________

request = <SubRequest 'test_agent' for <Coroutine test_update_function>>
kwargs = {'mock_function_manager': <MagicMock name='function_manager' id='139765165313920'>, 'mock_llm_provider': <AsyncMock sp...onfig(use_long_term_memory=True, use_redis_cache=True)), 'test_agent_id': UUID('12345678-1234-5678-1234-567812345678')}
func = <function test_agent at 0x7f1d9e3f5ee0>
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f1d9e1a2f20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f1d9cf92020>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()  # type: ignore[union-attr]
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:325: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_agent_id = UUID('12345678-1234-5678-1234-567812345678')
test_agent_config = AgentConfig(llm_providers=[LLMProviderConfig(provider_type='mock', model_name='mock-model', api_key=None, api_base=None)], temperature=0.7, max_tokens=150, memory_config=MemoryConfig(use_long_term_memory=True, use_redis_cache=True))
mock_function_manager = <MagicMock name='function_manager' id='139765165313920'>
mock_llm_provider = <AsyncMock spec='LLMProvider' id='139765165318720'>

    @pytest.fixture
    async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
        agent = Agent(
            agent_id=test_agent_id,
            name="Test Agent",
            config=test_agent_config,
            function_manager=mock_function_manager,
            llm_provider=mock_llm_provider
        )
>       await agent.initialize()
E       AttributeError: 'Agent' object has no attribute 'initialize'

tests/fixtures/agent_fixtures.py:29: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     memory:memory_system.py:33 MemorySystem initialized for agent: 12345678-1234-5678-1234-567812345678
INFO     agent:agent.py:45 Agent Test Agent (ID: 12345678-1234-5678-1234-567812345678) initialized
____________________ ERROR at setup of test_delete_function ____________________

request = <SubRequest 'test_agent' for <Coroutine test_delete_function>>
kwargs = {'mock_function_manager': <MagicMock name='function_manager' id='139765165613536'>, 'mock_llm_provider': <AsyncMock sp...onfig(use_long_term_memory=True, use_redis_cache=True)), 'test_agent_id': UUID('12345678-1234-5678-1234-567812345678')}
func = <function test_agent at 0x7f1d9e3f5ee0>
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f1d9cf92980>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f1d9cf92160>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()  # type: ignore[union-attr]
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:325: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_agent_id = UUID('12345678-1234-5678-1234-567812345678')
test_agent_config = AgentConfig(llm_providers=[LLMProviderConfig(provider_type='mock', model_name='mock-model', api_key=None, api_base=None)], temperature=0.7, max_tokens=150, memory_config=MemoryConfig(use_long_term_memory=True, use_redis_cache=True))
mock_function_manager = <MagicMock name='function_manager' id='139765165613536'>
mock_llm_provider = <AsyncMock spec='LLMProvider' id='139765165608544'>

    @pytest.fixture
    async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
        agent = Agent(
            agent_id=test_agent_id,
            name="Test Agent",
            config=test_agent_config,
            function_manager=mock_function_manager,
            llm_provider=mock_llm_provider
        )
>       await agent.initialize()
E       AttributeError: 'Agent' object has no attribute 'initialize'

tests/fixtures/agent_fixtures.py:29: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     memory:memory_system.py:33 MemorySystem initialized for agent: 12345678-1234-5678-1234-567812345678
INFO     agent:agent.py:45 Agent Test Agent (ID: 12345678-1234-5678-1234-567812345678) initialized
____________________ ERROR at setup of test_list_functions _____________________

request = <SubRequest 'test_agent' for <Coroutine test_list_functions>>
kwargs = {'mock_function_manager': <MagicMock name='function_manager' id='139765165619104'>, 'mock_llm_provider': <AsyncMock sp...onfig(use_long_term_memory=True, use_redis_cache=True)), 'test_agent_id': UUID('12345678-1234-5678-1234-567812345678')}
func = <function test_agent at 0x7f1d9e3f5ee0>
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f1d9cf92e80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f1d9cf92660>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()  # type: ignore[union-attr]
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:325: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_agent_id = UUID('12345678-1234-5678-1234-567812345678')
test_agent_config = AgentConfig(llm_providers=[LLMProviderConfig(provider_type='mock', model_name='mock-model', api_key=None, api_base=None)], temperature=0.7, max_tokens=150, memory_config=MemoryConfig(use_long_term_memory=True, use_redis_cache=True))
mock_function_manager = <MagicMock name='function_manager' id='139765165619104'>
mock_llm_provider = <AsyncMock spec='LLMProvider' id='139765164640592'>

    @pytest.fixture
    async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
        agent = Agent(
            agent_id=test_agent_id,
            name="Test Agent",
            config=test_agent_config,
            function_manager=mock_function_manager,
            llm_provider=mock_llm_provider
        )
>       await agent.initialize()
E       AttributeError: 'Agent' object has no attribute 'initialize'

tests/fixtures/agent_fixtures.py:29: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     memory:memory_system.py:33 MemorySystem initialized for agent: 12345678-1234-5678-1234-567812345678
INFO     agent:agent.py:45 Agent Test Agent (ID: 12345678-1234-5678-1234-567812345678) initialized
___________________ ERROR at setup of test_execute_function ____________________

request = <SubRequest 'test_agent' for <Coroutine test_execute_function>>
kwargs = {'mock_function_manager': <MagicMock name='function_manager' id='139765164648752'>, 'mock_llm_provider': <AsyncMock sp...onfig(use_long_term_memory=True, use_redis_cache=True)), 'test_agent_id': UUID('12345678-1234-5678-1234-567812345678')}
func = <function test_agent at 0x7f1d9e3f5ee0>
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f1d9e1a3ba0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f1d9cf92ca0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()  # type: ignore[union-attr]
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:325: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_agent_id = UUID('12345678-1234-5678-1234-567812345678')
test_agent_config = AgentConfig(llm_providers=[LLMProviderConfig(provider_type='mock', model_name='mock-model', api_key=None, api_base=None)], temperature=0.7, max_tokens=150, memory_config=MemoryConfig(use_long_term_memory=True, use_redis_cache=True))
mock_function_manager = <MagicMock name='function_manager' id='139765164648752'>
mock_llm_provider = <AsyncMock spec='LLMProvider' id='139765164653408'>

    @pytest.fixture
    async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
        agent = Agent(
            agent_id=test_agent_id,
            name="Test Agent",
            config=test_agent_config,
            function_manager=mock_function_manager,
            llm_provider=mock_llm_provider
        )
>       await agent.initialize()
E       AttributeError: 'Agent' object has no attribute 'initialize'

tests/fixtures/agent_fixtures.py:29: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     memory:memory_system.py:33 MemorySystem initialized for agent: 12345678-1234-5678-1234-567812345678
INFO     agent:agent.py:45 Agent Test Agent (ID: 12345678-1234-5678-1234-567812345678) initialized
_____________ ERROR at setup of test_execute_nonexistent_function ______________

request = <SubRequest 'test_agent' for <Coroutine test_execute_nonexistent_function>>
kwargs = {'mock_function_manager': <MagicMock name='function_manager' id='139765164641264'>, 'mock_llm_provider': <AsyncMock sp...onfig(use_long_term_memory=True, use_redis_cache=True)), 'test_agent_id': UUID('12345678-1234-5678-1234-567812345678')}
func = <function test_agent at 0x7f1d9e3f5ee0>
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f1d9e1a0cc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f1d9cf93240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
        gen_obj = func(**_add_kwargs(func, kwargs, event_loop, request))
    
        async def setup():
            res = await gen_obj.__anext__()  # type: ignore[union-attr]
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()  # type: ignore[union-attr]
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:325: in setup
    res = await gen_obj.__anext__()  # type: ignore[union-attr]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_agent_id = UUID('12345678-1234-5678-1234-567812345678')
test_agent_config = AgentConfig(llm_providers=[LLMProviderConfig(provider_type='mock', model_name='mock-model', api_key=None, api_base=None)], temperature=0.7, max_tokens=150, memory_config=MemoryConfig(use_long_term_memory=True, use_redis_cache=True))
mock_function_manager = <MagicMock name='function_manager' id='139765164641264'>
mock_llm_provider = <AsyncMock spec='LLMProvider' id='139765164638960'>

    @pytest.fixture
    async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
        agent = Agent(
            agent_id=test_agent_id,
            name="Test Agent",
            config=test_agent_config,
            function_manager=mock_function_manager,
            llm_provider=mock_llm_provider
        )
>       await agent.initialize()
E       AttributeError: 'Agent' object has no attribute 'initialize'

tests/fixtures/agent_fixtures.py:29: AttributeError
------------------------------ Captured log setup ------------------------------
INFO     memory:memory_system.py:33 MemorySystem initialized for agent: 12345678-1234-5678-1234-567812345678
INFO     agent:agent.py:45 Agent Test Agent (ID: 12345678-1234-5678-1234-567812345678) initialized
____________________ ERROR at setup of test_advanced_search ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 11
  async def test_advanced_search(async_client: AsyncClient, auth_headers, test_agent):
      # First, add some test memories
      for i in range(5):
          memory_data = {
              "agent_id": test_agent,
              "memory_type": "LONG_TERM",
              "entry": {
                  "content": f"Test memory content {i}",
                  "metadata": {"key": "value" if i % 2 == 0 else "other"},
                  "context": {
                      "context_type": "test_context",
                      "timestamp": (datetime.now() - timedelta(hours=i)).isoformat(),
                      "metadata": {}
                  }
              }
          }
          response = await async_client.post("/memory/add", json=memory_data, headers=auth_headers)
          assert response.status_code == 201

      # Perform advanced search
      search_params = {
          "query": "Test memory",
          "memory_type": "LONG_TERM",
          "context_type": "test_context",
          "time_range_start": (datetime.now() - timedelta(hours=3)).isoformat(),
          "time_range_end": datetime.now().isoformat(),
          "metadata_filters": json.dumps({"key": "value"}),
          "relevance_threshold": 0.5,
          "max_results": 2
      }

      response = await async_client.post(f"/memory/advanced-search?agent_id={test_agent}", params=search_params,
                                         headers=auth_headers)
      assert response.status_code == 200

      results = response.json()
      assert "agent_id" in results
      assert "results" in results
      assert "relevance_scores" in results
      assert len(results["results"]) <= 2

      for result, score in zip(results["results"], results["relevance_scores"]):
          assert "Test memory" in result["content"]
          assert result["metadata"]["key"] == "value"
          assert score >= 0.5
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________________ ERROR at setup of test_add_memory _______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 57
  async def test_add_memory(async_client: AsyncClient, auth_headers, test_agent):
      memory_data = {
          "agent_id": test_agent,
          "operation": MemoryOperation.ADD,
          "data": {
              "content": "Test memory content",
              "metadata": {"key": "value"}
          }
      }
      response = await async_client.post("/memory/operate", json=memory_data, headers=auth_headers)
      assert response.status_code == 200
      result = response.json()
      assert "memory_id" in result
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________________ ERROR at setup of test_retrieve_memory ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 71
  async def test_retrieve_memory(async_client: AsyncClient, auth_headers, test_agent):
      # First, add a memory
      add_response = await test_add_memory(async_client, auth_headers, test_agent)
      memory_id = add_response["memory_id"]

      retrieve_data = {
          "agent_id": str(test_agent),
          "operation": MemoryOperation.RETRIEVE,
          "data": {"memory_id": memory_id}
      }
      response = await async_client.post("/memory/operate", json=retrieve_data, headers=auth_headers)
      assert response.status_code == 200
      result = response.json()
      assert "content" in result
      assert result["content"] == "Test memory content"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_search_memory _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 87
  async def test_search_memory(async_client: AsyncClient, auth_headers, test_agent):
      # First, add a memory
      await test_add_memory(async_client, auth_headers, test_agent)

      search_data = {
          "agent_id": str(test_agent),
          "operation": MemoryOperation.SEARCH,
          "query": "test"
      }
      response = await async_client.post("/memory/operate", json=search_data, headers=auth_headers)
      assert response.status_code == 200
      results = response.json()
      assert isinstance(results, list)
      assert len(results) > 0
      assert "content" in results[0]
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_delete_memory _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 103
  async def test_delete_memory(async_client: AsyncClient, auth_headers, test_agent):
      memory_id = await test_add_memory(async_client, auth_headers, test_agent)
      response = await async_client.delete(f"/memory/delete?agent_id={test_agent}&memory_type={MemoryType.SHORT_TERM}&memory_id={memory_id}", headers=auth_headers)
      assert response.status_code == 200
      result = response.json()
      assert result["message"] == "Memory deleted successfully"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
___________________ ERROR at setup of test_memory_operation ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 110
  async def test_memory_operation(async_client: AsyncClient, auth_headers, test_agent):
      operation_data = {
          "agent_id": test_agent,
          "operation": MemoryOperation.ADD,
          "memory_type": MemoryType.SHORT_TERM,
          "data": {
              "content": "Test operation memory content",
              "metadata": {"operation": "test"}
          }
      }
      response = await async_client.post("/memory/operate", json=operation_data, headers=auth_headers)
      assert response.status_code == 200
      result = response.json()
      assert result["message"] == "ADD operation completed successfully"
      assert "result" in result
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_add_long_term_memory __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 126
  async def test_add_long_term_memory(async_client: AsyncClient, auth_headers, test_agent):
      memory_data = {
          "agent_id": test_agent,
          "memory_type": MemoryType.LONG_TERM,
          "entry": {
              "content": "Long-term test memory content",
              "metadata": {"key": "long_term_value"}
          }
      }
      response = await async_client.post("/memory/add", json=memory_data, headers=auth_headers)
      assert response.status_code == 201
      added_memory = response.json()
      assert "memory_id" in added_memory
      assert added_memory["message"] == "Memory added successfully"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_search_long_term_memory ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 141
  async def test_search_long_term_memory(async_client: AsyncClient, auth_headers, test_agent):
      await test_add_long_term_memory(async_client, auth_headers, test_agent)
      search_data = {
          "agent_id": test_agent,
          "memory_type": MemoryType.LONG_TERM,
          "query": "Long-term test",
          "limit": 5
      }
      response = await async_client.post("/memory/search", json=search_data, headers=auth_headers)
      assert response.status_code == 200
      results = response.json()
      assert "results" in results
      assert isinstance(results["results"], list)
      assert len(results["results"]) > 0
      assert "Long-term test memory content" in results["results"][0]["content"]
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________ ERROR at setup of test_send_message_invalid_agent _______________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_memory.py, line 157
  @pytest.mark.asyncio
  async def test_send_message_invalid_agent(async_client: AsyncClient, auth_headers):
      invalid_agent_id = "00000000-0000-0000-0000-000000000000"
      message_data = {
          "agent_id": invalid_agent_id,
          "content": "This should fail"
      }
      response = await async_client.post("/message/send", json=message_data, headers=auth_headers)
      assert response.status_code == 404
      assert "detail" in response.json()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/performance::<event_loop>, tests/unit/api/test_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_send_message ______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_message.py, line 7
  async def test_send_message(async_client: AsyncClient, auth_headers, test_agent):
      message_data = {
          "agent_id": test_agent,
          "content": "Hello, agent!"
      }
      response = await async_client.post("/message/send", json=message_data, headers=auth_headers)
      assert response.status_code == 200
      result = response.json()
      assert "agent_id" in result
      assert result["agent_id"] == test_agent
      assert "content" in result
      assert isinstance(result["content"], str)
      assert isinstance(result.get("function_calls", []), list)
      return result
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/utils::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_message.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_get_message_history __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_message.py, line 22
  async def test_get_message_history(async_client: AsyncClient, auth_headers, test_agent):
      # First, send a message to ensure there's some history
      sent_message = await test_send_message(async_client, auth_headers, test_agent)

      response = await async_client.get(f"/message/history?agent_id={test_agent}&limit=10", headers=auth_headers)
      assert response.status_code == 200
      history = response.json()
      assert "agent_id" in history
      assert history["agent_id"] == test_agent
      assert isinstance(history["messages"], list)
      assert len(history["messages"]) > 0
      assert history["messages"][0]["content"] == "Hello, agent!"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/utils::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_message.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_clear_message_history _________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_message.py, line 35
  async def test_clear_message_history(async_client: AsyncClient, auth_headers, test_agent):
      # First, send a message to ensure there's some history
      await test_send_message(async_client, auth_headers, test_agent)

      response = await async_client.post(f"/message/clear", json={"agent_id": test_agent}, headers=auth_headers)
      assert response.status_code == 200
      result = response.json()
      assert result["message"] == "Message history cleared successfully"

      # Verify that the history is indeed cleared
      response = await async_client.get(f"/message/history?agent_id={test_agent}&limit=10", headers=auth_headers)
      assert response.status_code == 200
      history = response.json()
      assert len(history["messages"]) == 0
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/utils::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_message.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_get_latest_message ___________________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_message.py, line 50
  async def test_get_latest_message(async_client: AsyncClient, auth_headers, test_agent):
      # First, send a message
      sent_message = await test_send_message(async_client, auth_headers, test_agent)

      response = await async_client.get(f"/message/latest?agent_id={test_agent}", headers=auth_headers)
      assert response.status_code == 200
      latest_message = response.json()
      assert latest_message["content"] == "Hello, agent!"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/utils::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_message.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________ ERROR at setup of test_send_message_invalid_agent _______________
file /home/shaun/repos/srt-agentic-api/tests/unit/api/test_message.py, line 59
  async def test_send_message_invalid_agent(async_client: AsyncClient, auth_headers):
      invalid_agent_id = str(UUID(int=0))
      message_data = {
          "agent_id": invalid_agent_id,
          "content": "This should fail"
      }
      response = await async_client.post("/message/send", json=message_data, headers=auth_headers)
      assert response.status_code == 404
      assert "detail" in response.json()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/utils::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/api/test_message.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________ ERROR at setup of test_memory_system_initialization ______________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 23
  @pytest.mark.asyncio
  async def test_memory_system_initialization(memory_config):
      with patch('app.core.memory.memory_system.RedisMemory') as MockRedisMemory, \
              patch('app.core.memory.memory_system.VectorMemory') as MockVectorMemory:
          mock_redis = AsyncMock()
          mock_vector = AsyncMock()
          MockRedisMemory.return_value = mock_redis
          MockVectorMemory.return_value = mock_vector

          system = MemorySystem(agent_id='test-agent', config=memory_config)
          await system.initialize()

          mock_redis.initialize.assert_called_once()
          mock_vector.initialize.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_add_short_term_memory _________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 39
  @pytest.mark.asyncio
  async def test_add_short_term_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await memory_system.add("SHORT_TERM", memory_entry)
      assert isinstance(memory_id, str)
      assert len(memory_system.consolidation_queue) == 1
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_add_long_term_memory __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 51
  @pytest.mark.asyncio
  async def test_add_long_term_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await memory_system.add("LONG_TERM", memory_entry)
      assert isinstance(memory_id, str)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________ ERROR at setup of test_retrieve_short_term_memory _______________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 62
  @pytest.mark.asyncio
  async def test_retrieve_short_term_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await memory_system.add("SHORT_TERM", memory_entry)
      retrieved_memory = await memory_system.retrieve("SHORT_TERM", memory_id)
      assert retrieved_memory.content == memory_entry.content
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_retrieve_long_term_memory _______________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 74
  @pytest.mark.asyncio
  async def test_retrieve_long_term_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await memory_system.add("LONG_TERM", memory_entry)
      retrieved_memory = await memory_system.retrieve("LONG_TERM", memory_id)
      assert retrieved_memory.content == memory_entry.content
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________________ ERROR at setup of test_search _________________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 86
  @pytest.mark.asyncio
  async def test_search(memory_system):
      # Add some test data
      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
          )
          await memory_system.add("SHORT_TERM", memory_entry)
          await memory_system.add("LONG_TERM", memory_entry)

      query = AdvancedSearchQuery(query="Test content", max_results=3)
      results = await memory_system.search(query)
      assert len(results) == 3
      assert all("Test content" in result["memory_entry"].content for result in results)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_delete_short_term_memory ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 104
  @pytest.mark.asyncio
  async def test_delete_short_term_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await memory_system.add("SHORT_TERM", memory_entry)
      await memory_system.delete("SHORT_TERM", memory_id)
      retrieved_memory = await memory_system.retrieve("SHORT_TERM", memory_id)
      assert retrieved_memory is None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_delete_long_term_memory ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 117
  @pytest.mark.asyncio
  async def test_delete_long_term_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await memory_system.add("LONG_TERM", memory_entry)
      await memory_system.delete("LONG_TERM", memory_id)
      retrieved_memory = await memory_system.retrieve("LONG_TERM", memory_id)
      assert retrieved_memory is None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_perform_operation_add _________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 130
  @pytest.mark.asyncio
  async def test_perform_operation_add(memory_system):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      result = await memory_system.perform_operation("ADD", "SHORT_TERM", memory_entry.dict())
      assert isinstance(result, str)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_consolidate_memories __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 141
  @pytest.mark.asyncio
  async def test_consolidate_memories(memory_system):
      # Add some old memories to short-term storage
      old_time = datetime.now() - timedelta(hours=2)
      for i in range(3):
          memory_entry = MemoryEntry(
              content=f"Old content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=old_time, metadata={})
          )
          await memory_system.add("SHORT_TERM", memory_entry)

      await memory_system.consolidate_memories()

      # Check that memories have been moved to long-term storage
      query = AdvancedSearchQuery(query="Old content", max_results=5)
      results = await memory_system.search(query)
      assert len(results) == 3
      assert all(result["memory_entry"].context.timestamp == old_time for result in results)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_forget_old_memories __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 162
  @pytest.mark.asyncio
  async def test_forget_old_memories(memory_system):
      # Add some very old memories to long-term storage
      very_old_time = datetime.now() - timedelta(days=31)
      for i in range(3):
          memory_entry = MemoryEntry(
              content=f"Very old content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=very_old_time, metadata={})
          )
          await memory_system.add("LONG_TERM", memory_entry)

      await memory_system.forget_old_memories(timedelta(days=30))

      # Check that old memories have been forgotten
      query = AdvancedSearchQuery(query="Very old content", max_results=5)
      results = await memory_system.search(query)
      assert len(results) == 0
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________ ERROR at setup of test_memory_system_error_handling ______________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 182
  @pytest.mark.asyncio
  async def test_memory_system_error_handling(memory_system):
      with pytest.raises(MemorySystemError):
          await memory_system.add("INVALID_TYPE", MemoryEntry(
              content="Test content",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
          ))

      with pytest.raises(MemorySystemError):
          await memory_system.retrieve("INVALID_TYPE", "some_id")

      with pytest.raises(MemorySystemError):
          await memory_system.delete("INVALID_TYPE", "some_id")

      with pytest.raises(MemorySystemError):
          await memory_system.perform_operation("INVALID_OPERATION", "SHORT_TERM", {})
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_memory_system_close __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 201
  @pytest.mark.asyncio
  async def test_memory_system_close(memory_config):
      with patch('app.core.memory.memory_system.RedisMemory') as MockRedisMemory, \
              patch('app.core.memory.memory_system.VectorMemory') as MockVectorMemory:
          mock_redis = AsyncMock()
          mock_vector = AsyncMock()
          MockRedisMemory.return_value = mock_redis
          MockVectorMemory.return_value = mock_vector

          system = MemorySystem(agent_id='test-agent', config=memory_config)
          await system.initialize()
          await system.close()

          mock_redis.close.assert_called_once()
          mock_vector.close.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
___________ ERROR at setup of test_memory_system_search_with_errors ____________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 218
  @pytest.mark.asyncio
  async def test_memory_system_search_with_errors(memory_system):
      # Mock the search methods to simulate errors
      memory_system.short_term.search = AsyncMock(side_effect=Exception("Short-term search error"))
      memory_system.long_term.search = AsyncMock(side_effect=Exception("Long-term search error"))

      query = AdvancedSearchQuery(query="Test content", max_results=3)
      results = await memory_system.search(query)

      # Both searches failed, so results should be empty
      assert len(results) == 0

      # Check that errors were logged
      memory_system.short_term.search.assert_called_once()
      memory_system.long_term.search.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________ ERROR at setup of test_memory_system_partial_search_success __________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 235
  @pytest.mark.asyncio
  async def test_memory_system_partial_search_success(memory_system):
      # Mock the search methods to simulate partial success
      memory_system.short_term.search = AsyncMock(return_value=[
          {"memory_entry": MemoryEntry(content="Short-term content", metadata={},
                                       context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})),
           "relevance_score": 0.8}
      ])
      memory_system.long_term.search = AsyncMock(side_effect=Exception("Long-term search error"))

      query = AdvancedSearchQuery(query="Test content", max_results=3)
      results = await memory_system.search(query)

      # Short-term search succeeded, long-term failed
      assert len(results) == 1
      assert results[0]["memory_entry"].content == "Short-term content"

      memory_system.short_term.search.assert_called_once()
      memory_system.long_term.search.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________________ ERROR at setup of test_add_memory _______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 255
  @pytest.mark.asyncio
  async def test_add_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test memory content",
          metadata={"key": "value"},
          context=MemoryContext(
              context_type="test",
              timestamp=datetime.now(),
              metadata={}
          )
      )
      memory_id = await memory_system.add(MemoryType.SHORT_TERM, memory_entry)
      assert isinstance(memory_id, str)
      retrieved_memory = await memory_system.retrieve(MemoryType.SHORT_TERM, memory_id)
      assert retrieved_memory.content == "Test memory content"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________________ ERROR at setup of test_retrieve_memory ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 271
  @pytest.mark.asyncio
  async def test_retrieve_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test memory content",
          metadata={"key": "value"},
          context=MemoryContext(context_type="test", timestamp=datetime.now())
      )
      memory_id = await memory_system.add(MemoryType.SHORT_TERM, memory_entry)
      retrieved_memory = await memory_system.retrieve(MemoryType.SHORT_TERM, memory_id)
      assert retrieved_memory.content == "Test memory content"
      assert retrieved_memory.metadata == {"key": "value"}
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________________ ERROR at setup of test_search_memory _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_memory_system.py, line 283
  @pytest.mark.asyncio
  async def test_search_memory(memory_system):
      memory_entry = MemoryEntry(
          content="Test memory content",
          metadata={"key": "value"},
          context=MemoryContext(context_type="test", timestamp=datetime.now())
      )
      await memory_system.add(MemoryType.SHORT_TERM, memory_entry)
      search_results = await memory_system.search(AdvancedSearchQuery(query="test", memory_type=MemoryType.SHORT_TERM))
      assert len(search_results) > 0
      assert search_results[0].content == "Test memory content"
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, memory_config, memory_system, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_memory_system.py::<event_loop>, tests/unit/core/memory::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________ ERROR at setup of test_redis_connection_initialization ____________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_connections.py, line 13
  @pytest.mark.asyncio
  async def test_redis_connection_initialization(redis_url):
      agent_id = '12345678-1234-5678-1234-567812345678'
      with patch('redis.asyncio.Redis.from_url') as mock_redis:
          mock_redis.return_value = AsyncMock()
          mock_redis.return_value.ping.return_value = True
          mock_redis.return_value.info.return_value = {
              'redis_version': '6.0.0',
              'connected_clients': '1',
              'used_memory_human': '1M'
          }

          connection = RedisConnection(agent_id)
          await connection.initialize()

          assert connection.redis is not None
          mock_redis.assert_called_once_with(redis_url, encoding="utf-8", decode_responses=True)
          mock_redis.return_value.ping.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, redis_url, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_connections.py::<event_loop>, tests/unit/core::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________ ERROR at setup of test_redis_connection_initialization_retry _________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_connections.py, line 33
  @pytest.mark.asyncio
  async def test_redis_connection_initialization_retry(redis_url):
      agent_id = '12345678-1234-5678-1234-567812345678'
      with patch('redis.asyncio.Redis.from_url') as mock_redis, \
              patch('asyncio.sleep', return_value=None):
          mock_redis.return_value = AsyncMock()
          mock_redis.return_value.ping.side_effect = [TimeoutError, True]
          mock_redis.return_value.info.return_value = {
              'redis_version': '6.0.0',
              'connected_clients': '1',
              'used_memory_human': '1M'
          }

          connection = RedisConnection(agent_id)
          await connection.initialize()

          assert connection.redis is not None
          assert mock_redis.call_count == 2
          assert mock_redis.return_value.ping.call_count == 2
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, redis_url, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_connections.py::<event_loop>, tests/unit/core::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________ ERROR at setup of test_redis_connection_initialization_failure ________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_connections.py, line 54
  @pytest.mark.asyncio
  async def test_redis_connection_initialization_failure(redis_url):
      agent_id = '12345678-1234-5678-1234-567812345678'
      with patch('redis.asyncio.Redis.from_url') as mock_redis, \
              patch('asyncio.sleep', return_value=None):
          mock_redis.return_value = AsyncMock()
          mock_redis.return_value.ping.side_effect = ConnectionError

          connection = RedisConnection(agent_id)
          with pytest.raises(RedisConnectionError):
              await connection.initialize()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, redis_url, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_connections.py::<event_loop>, tests/unit/core::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________ ERROR at setup of test_redis_connection_get_connection ____________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_connections.py, line 67
  @pytest.mark.asyncio
  async def test_redis_connection_get_connection(redis_url):
      agent_id = '12345678-1234-5678-1234-567812345678'
      with patch('redis.asyncio.Redis.from_url') as mock_redis:
          mock_redis.return_value = AsyncMock()
          mock_redis.return_value.ping.return_value = True
          mock_redis.return_value.info.return_value = {
              'redis_version': '6.0.0',
              'connected_clients': '1',
              'used_memory_human': '1M'
          }

          connection = RedisConnection(agent_id)
          await connection.initialize()

          async with connection.get_connection() as conn:
              assert conn is not None
              assert conn is connection.redis
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, redis_url, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_connections.py::<event_loop>, tests/unit/core::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________ ERROR at setup of test_redis_connection_ensure_connection ___________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_connections.py, line 87
  @pytest.mark.asyncio
  async def test_redis_connection_ensure_connection(redis_url):
      agent_id = '12345678-1234-5678-1234-567812345678'
      with patch('redis.asyncio.Redis.from_url') as mock_redis:
          mock_redis.return_value = AsyncMock()
          mock_redis.return_value.ping.return_value = True
          mock_redis.return_value.info.return_value = {
              'redis_version': '6.0.0',
              'connected_clients': '1',
              'used_memory_human': '1M'
          }

          connection = RedisConnection(agent_id)

          # Test when redis is None
          await connection.ensure_connection()
          assert connection.redis is not None

          # Test when redis is already initialized
          await connection.ensure_connection()
          assert mock_redis.call_count == 1
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, redis_url, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_connections.py::<event_loop>, tests/unit/core::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_redis_connection_close _________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_connections.py, line 110
  @pytest.mark.asyncio
  async def test_redis_connection_close(redis_url):
      agent_id = '12345678-1234-5678-1234-567812345678'
      with patch('redis.asyncio.Redis.from_url') as mock_redis:
          mock_redis.return_value = AsyncMock()
          mock_redis.return_value.ping.return_value = True
          mock_redis.return_value.info.return_value = {
              'redis_version': '6.0.0',
              'connected_clients': '1',
              'used_memory_human': '1M'
          }

          connection = RedisConnection(agent_id)
          await connection.initialize()

          await connection.close()
          assert connection.redis is None
          mock_redis.return_value.aclose.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, redis_url, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_connections.py::<event_loop>, tests/unit/core::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________ ERROR at setup of test_redis_connection_too_many_connections _________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_connections.py, line 130
  @pytest.mark.asyncio
  async def test_redis_connection_too_many_connections(redis_url):
      agent_id = '12345678-1234-5678-1234-567812345678'
      with patch('redis.asyncio.Redis.from_url') as mock_redis, \
              patch('asyncio.sleep', return_value=None):
          mock_redis.return_value = AsyncMock()
          mock_redis.return_value.ping.side_effect = ConnectionError("too many connections")

          connection = RedisConnection(agent_id)
          with pytest.raises(RedisConnectionError) as excinfo:
              await connection.initialize()

          assert "too many connections" in str(excinfo.value)
          mock_redis.return_value.aclose.assert_called()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, redis_url, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_connections.py::<event_loop>, tests/unit/core::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_redis_memory_lifecycle _________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_memory.py, line 10
  @pytest.mark.asyncio
  async def test_redis_memory_lifecycle():
      with patch('app.core.memory.redis.connection.Redis') as MockRedis:
          # Set up the mock
          mock_redis = AsyncMock()
          MockRedis.from_url.return_value = mock_redis

          # Test successful initialization
          redis_memory = RedisMemory(agent_id='test-agent')
          await redis_memory.initialize()
          assert redis_memory.connection.redis is not None
          mock_redis.ping.assert_called_once()

          # Test successful close
          await redis_memory.close()
          assert redis_memory.connection.redis is None
          mock_redis.close.assert_called_once()

          # Test re-initialization
          await redis_memory.initialize()
          assert redis_memory.connection.redis is not None
          assert mock_redis.ping.call_count == 2

          # Test initialization failure
          mock_redis.ping.side_effect = RedisConnectionError("Connection failed")
          with pytest.raises(RedisMemoryError):
              await redis_memory.initialize()

          # Test cleanup
          mock_redis.ping.side_effect = None  # Reset side effect
          await redis_memory.cleanup()
          # Add assertions for cleanup operations

          # Test operation after cleanup
          with pytest.raises(RedisMemoryError):
              await redis_memory.add(AsyncMock())  # This should fail as the connection is closed

          # Test reconnection after failure
          mock_redis.ping.side_effect = None  # Reset side effect
          await redis_memory.initialize()
          assert redis_memory.connection.redis is not None

          # Test concurrent operations
          async def concurrent_operation():
              await redis_memory.add(AsyncMock())

          await asyncio.gather(*[concurrent_operation() for _ in range(10)])
          assert mock_redis.set.call_count == 10
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_redis_memory_add_and_get ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_memory.py, line 59
  @pytest.mark.asyncio
  async def test_redis_memory_add_and_get(redis_memory):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={"key": "value"},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await redis_memory.add(memory_entry)
      assert isinstance(memory_id, str)

      retrieved_entry = await redis_memory.get(memory_id)
      assert retrieved_entry is not None
      assert retrieved_entry.content == memory_entry.content
      assert retrieved_entry.metadata == memory_entry.metadata
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_redis_memory_search __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_memory.py, line 74
  @pytest.mark.asyncio
  async def test_redis_memory_search(redis_memory):
      # Add test data
      for i in range(10):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={"index": i},
              context=MemoryContext(context_type="test", timestamp=datetime.now() - timedelta(minutes=i), metadata={})
          )
          await redis_memory.add(memory_entry)

      query = AdvancedSearchQuery(query="Test content", max_results=5)
      results = await redis_memory.search(query)
      assert len(results) == 5
      assert all("Test content" in result["memory_entry"].content for result in results)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
__________________ ERROR at setup of test_redis_memory_delete __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_memory.py, line 90
  @pytest.mark.asyncio
  async def test_redis_memory_delete(redis_memory):
      memory_entry = MemoryEntry(
          content="Test content to delete",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await redis_memory.add(memory_entry)

      await redis_memory.delete(memory_id)
      retrieved_entry = await redis_memory.get(memory_id)
      assert retrieved_entry is None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_redis_memory_get_recent ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_memory.py, line 103
  @pytest.mark.asyncio
  async def test_redis_memory_get_recent(redis_memory):
      for i in range(10):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now() - timedelta(minutes=i), metadata={})
          )
          await redis_memory.add(memory_entry)

      recent_memories = await redis_memory.get_recent(5)
      assert len(recent_memories) == 5
      assert all("Test content" in memory["memory_entry"].content for memory in recent_memories)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________ ERROR at setup of test_redis_memory_get_memories_older_than __________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_redis_memory.py, line 117
  @pytest.mark.asyncio
  async def test_redis_memory_get_memories_older_than(redis_memory):
      now = datetime.now()
      threshold = now - timedelta(hours=2)

      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=now - timedelta(hours=i), metadata={})
          )
          await redis_memory.add(memory_entry)

      old_memories = await redis_memory.get_memories_older_than(threshold)
      assert len(old_memories) == 3
      assert all(memory.context.timestamp < threshold for memory in old_memories)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_redis_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
________________ ERROR at setup of test_vector_memory_lifecycle ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_vector_memory.py, line 17
  @pytest.mark.asyncio
  async def test_vector_memory_lifecycle(vector_memory):
      # Test initialization and closure
      assert vector_memory.collection is not None
      await vector_memory.close()
      assert vector_memory.client is None

      # Test reinitialization
      await vector_memory.initialize()
      assert vector_memory.collection is not None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory/redis::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_vector_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_vector_memory_add_and_get _______________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_vector_memory.py, line 28
  @pytest.mark.asyncio
  async def test_vector_memory_add_and_get(vector_memory):
      memory_entry = MemoryEntry(
          content="Test content",
          metadata={"key": "value"},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await vector_memory.add(memory_entry)
      assert isinstance(memory_id, str)

      retrieved_entry = await vector_memory.get(memory_id)
      assert retrieved_entry is not None
      assert retrieved_entry.content == memory_entry.content
      assert retrieved_entry.metadata == memory_entry.metadata
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory/redis::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_vector_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_vector_memory_search __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_vector_memory.py, line 43
  @pytest.mark.asyncio
  async def test_vector_memory_search(vector_memory):
      # Add test data
      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={"index": i},
              context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
          )
          await vector_memory.add(memory_entry)

      query = AdvancedSearchQuery(query="Test content", max_results=3)
      results = await vector_memory.search(query)

      assert len(results) == 3
      assert all("Test content" in result["memory_entry"].content for result in results)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory/redis::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_vector_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_vector_memory_delete __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_vector_memory.py, line 60
  @pytest.mark.asyncio
  async def test_vector_memory_delete(vector_memory):
      memory_entry = MemoryEntry(
          content="Test content to delete",
          metadata={},
          context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
      )
      memory_id = await vector_memory.add(memory_entry)

      await vector_memory.delete(memory_id)
      retrieved_entry = await vector_memory.get(memory_id)
      assert retrieved_entry is None
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory/redis::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_vector_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_vector_memory_get_recent ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_vector_memory.py, line 73
  @pytest.mark.asyncio
  async def test_vector_memory_get_recent(vector_memory):
      for i in range(10):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=datetime.now() - timedelta(minutes=i), metadata={})
          )
          await vector_memory.add(memory_entry)

      recent_memories = await vector_memory.get_recent(5)
      assert len(recent_memories) == 5
      assert all("Test content" in memory["memory_entry"].content for memory in recent_memories)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory/redis::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_vector_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________ ERROR at setup of test_vector_memory_get_memories_older_than _________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_vector_memory.py, line 87
  @pytest.mark.asyncio
  async def test_vector_memory_get_memories_older_than(vector_memory):
      now = datetime.now()
      threshold = now - timedelta(hours=2)

      for i in range(5):
          memory_entry = MemoryEntry(
              content=f"Test content {i}",
              metadata={},
              context=MemoryContext(context_type="test", timestamp=now - timedelta(hours=i), metadata={})
          )
          await vector_memory.add(memory_entry)

      old_memories = await vector_memory.get_memories_older_than(threshold)
      assert len(old_memories) == 3
      assert all(memory.context.timestamp < threshold for memory in old_memories)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory/redis::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_vector_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________ ERROR at setup of test_vector_memory_error_handling ______________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/memory/test_vector_memory.py, line 104
  @pytest.mark.asyncio
  async def test_vector_memory_error_handling(vector_memory):
      with patch.object(vector_memory.collection, 'add', side_effect=Exception("ChromaDB error")):
          with pytest.raises(VectorMemoryError):
              await vector_memory.add(MemoryEntry(
                  content="Test error content",
                  metadata={},
                  context=MemoryContext(context_type="test", timestamp=datetime.now(), metadata={})
              ))
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory/redis::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/memory/test_vector_memory.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vector_memory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
____________________ ERROR at setup of test_advanced_search ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 53
  async def test_advanced_search(test_agent, mock_memory_system):
      # Mock memory system's advanced search method
      mock_memory_system.search.return_value = [
          {"content": "Test memory content 1", "metadata": {"key": "value"}, "relevance_score": 0.8},
          {"content": "Test memory content 2", "metadata": {"key": "value"}, "relevance_score": 0.6}
      ]

      search_params = {
          "query": "Test memory",
          "memory_type": MemoryType.LONG_TERM,
          "context_type": "test_context",
          "time_range": {
              "start": datetime.now() - timedelta(hours=3),
              "end": datetime.now()
          },
          "metadata_filters": {"key": "value"},
          "relevance_threshold": 0.5,
          "max_results": 2
      }

      results = await test_agent.memory.search(search_params)

      assert len(results) == 2
      for result in results:
          assert "Test memory" in result["content"]
          assert result["metadata"]["key"] == "value"
          assert result["relevance_score"] >= 0.5

      mock_memory_system.search.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
______________________ ERROR at setup of test_add_memory _______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 83
  async def test_add_memory(test_agent, mock_memory_system):
      memory_entry = MemoryEntry(
          content="Test memory content",
          metadata={"key": "value"},
          context=MemoryContext(
              context_type="test_context",
              timestamp=datetime.now(),
              metadata={}
          )
      )

      mock_memory_system.add.return_value = "test_memory_id"

      memory_id = await test_agent.memory.add(MemoryType.SHORT_TERM, memory_entry)

      assert memory_id == "test_memory_id"
      mock_memory_system.add.assert_called_once_with(MemoryType.SHORT_TERM, memory_entry)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
____________________ ERROR at setup of test_retrieve_memory ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 101
  async def test_retrieve_memory(test_agent, mock_memory_system):
      memory_entry = MemoryEntry(
          content="Test memory content",
          metadata={"key": "value"},
          context=MemoryContext(
              context_type="test_context",
              timestamp=datetime.now(),
              metadata={}
          )
      )

      mock_memory_system.retrieve.return_value = memory_entry

      retrieved_memory = await test_agent.memory.retrieve(MemoryType.SHORT_TERM, "test_memory_id")

      assert retrieved_memory == memory_entry
      mock_memory_system.retrieve.assert_called_once_with(MemoryType.SHORT_TERM, "test_memory_id")
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
_____________________ ERROR at setup of test_search_memory _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 119
  async def test_search_memory(test_agent, mock_memory_system):
      mock_memory_system.search.return_value = [
          {"content": "Test memory content", "metadata": {"key": "value"}, "relevance_score": 0.8}
      ]

      search_results = await test_agent.memory.search({
          "query": "Test memory",
          "memory_type": MemoryType.SHORT_TERM,
          "max_results": 5
      })

      assert len(search_results) == 1
      assert search_results[0]["content"] == "Test memory content"
      assert "relevance_score" in search_results[0]
      mock_memory_system.search.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
_____________________ ERROR at setup of test_delete_memory _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 135
  async def test_delete_memory(test_agent, mock_memory_system):
      await test_agent.memory.delete(MemoryType.SHORT_TERM, "test_memory_id")
      mock_memory_system.delete.assert_called_once_with(MemoryType.SHORT_TERM, "test_memory_id")
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
___________________ ERROR at setup of test_memory_operation ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 139
  async def test_memory_operation(test_agent, mock_memory_system):
      operation_data = {
          "content": "Test operation memory content",
          "metadata": {"operation": "test"},
          "context": {
              "context_type": "test_operation",
              "timestamp": datetime.now(),
              "metadata": {}
          }
      }

      mock_memory_system.perform_operation.return_value = "Operation result"

      result = await test_agent.memory.perform_operation(MemoryOperation.ADD, MemoryType.SHORT_TERM, operation_data)

      assert result == "Operation result"
      mock_memory_system.perform_operation.assert_called_once_with(MemoryOperation.ADD, MemoryType.SHORT_TERM, operation_data)
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
____________________ ERROR at setup of test_process_message ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 157
  async def test_process_message(test_agent, mock_llm_provider):
      mock_llm_provider.generate.return_value = "Test response"
      test_agent.memory.retrieve_relevant.return_value = []

      response, function_calls = await test_agent.process_message("Test message")

      assert response == "Test response"
      assert isinstance(function_calls, list)
      mock_llm_provider.generate.assert_called_once()
      test_agent.memory.add.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
___________________ ERROR at setup of test_execute_function ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 168
  async def test_execute_function(test_agent, mock_function_manager):
      mock_function = AsyncMock()
      mock_function.implementation.return_value = "Function result"
      mock_function_manager.registered_functions = {"func1": mock_function}
      test_agent.available_function_ids = ["func1"]

      result = await test_agent.execute_function("func1", {"param": "value"})

      assert result == "Function result"
      mock_function.implementation.assert_called_once_with(param="value")
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
________________ ERROR at setup of test_get_available_functions ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 179
  def test_get_available_functions(test_agent, mock_function_manager):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
_____________________ ERROR at setup of test_add_function ______________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 192
  def test_add_function(test_agent, mock_function_manager):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
____________________ ERROR at setup of test_remove_function ____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 199
  def test_remove_function(test_agent):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
_________________ ERROR at setup of test_get_function_by_name __________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 207
  def test_get_function_by_name(test_agent, mock_function_manager):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
____________________ ERROR at setup of test_prepare_prompt _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 216
  def test_prepare_prompt(test_agent):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
____________________ ERROR at setup of test_parse_response _____________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 230
  def test_parse_response(test_agent):
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 41
  @pytest.fixture
  def test_agent(test_agent_config, mock_function_manager, mock_memory_system, mock_llm_provider):
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py, line 33
  @pytest.fixture
  def mock_function_manager(mock_factory):
E       fixture 'mock_factory' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core/memory::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_function_manager, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_memory_system, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_agent.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/unit/core/test_agent.py:33
_________________ ERROR at setup of test_llm_provider_fallback _________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_llm_provider.py, line 27
  @pytest.mark.asyncio
  async def test_llm_provider_fallback(provider_configs):
      with patch('app.core.llm_provider.OpenAIProvider.generate') as mock_openai, \
              patch('app.core.llm_provider.VLLMProvider.generate') as mock_vllm, \
              patch('app.core.llm_provider.LlamaCppServerProvider.generate') as mock_llamacpp:
          mock_openai.side_effect = APICallException("OpenAI failed")
          mock_vllm.side_effect = APICallException("vLLM failed")
          mock_llamacpp.return_value = "LlamaCpp response"

          llm_provider = LLMProvider(provider_configs)
          result = await llm_provider.generate("Test prompt", 0.7, 100)

          assert result == "LlamaCpp response"
          mock_openai.assert_called_once()
          mock_vllm.assert_called_once()
          mock_llamacpp.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, provider_configs, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_llm_provider.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_________________ ERROR at setup of test_llm_provider_all_fail _________________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_llm_provider.py, line 45
  @pytest.mark.asyncio
  async def test_llm_provider_all_fail(provider_configs):
      with patch('app.core.llm_provider.OpenAIProvider.generate') as mock_openai, \
              patch('app.core.llm_provider.VLLMProvider.generate') as mock_vllm, \
              patch('app.core.llm_provider.LlamaCppServerProvider.generate') as mock_llamacpp:
          mock_openai.side_effect = APICallException("OpenAI failed")
          mock_vllm.side_effect = APICallException("vLLM failed")
          mock_llamacpp.side_effect = APICallException("LlamaCpp failed")

          llm_provider = LLMProvider(provider_configs)

          with pytest.raises(APICallException, match="LlamaCpp failed"):
              await llm_provider.generate("Test prompt", 0.7, 100)

          mock_openai.assert_called_once()
          mock_vllm.assert_called_once()
          mock_llamacpp.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, provider_configs, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_llm_provider.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
______________ ERROR at setup of test_llm_provider_first_succeeds ______________
file /home/shaun/repos/srt-agentic-api/tests/unit/core/test_llm_provider.py, line 64
  @pytest.mark.asyncio
  async def test_llm_provider_first_succeeds(provider_configs):
      with patch('app.core.llm_provider.OpenAIProvider.generate') as mock_openai:
          mock_openai.return_value = "OpenAI response"

          llm_provider = LLMProvider(provider_configs)
          result = await llm_provider.generate("Test prompt", 0.7, 100)

          assert result == "OpenAI response"
          mock_openai.assert_called_once()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/core::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, provider_configs, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/core/test_llm_provider.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_redis_memory_async_setup ________________
file /home/shaun/repos/srt-agentic-api/tests/unit/test_async_setup.py, line 7
  @pytest.mark.asyncio
  async def test_redis_memory_async_setup():
      agent_id = UUID('12345678-1234-5678-1234-567812345678')
      redis_mem = RedisMemory(agent_id)
      await redis_mem.initialize()
      assert redis_mem.redis is not None
      await redis_mem.close()
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/api/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/test_async_setup.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_______________ ERROR at setup of test_vector_memory_async_setup _______________
file /home/shaun/repos/srt-agentic-api/tests/unit/test_async_setup.py, line 15
  @pytest.mark.asyncio
  async def test_vector_memory_async_setup():
      agent_id = UUID('12345678-1234-5678-1234-567812345678')
      vector_mem = VectorMemory(f"agent_{agent_id}")
      assert vector_mem.collection is not None
      # VectorMemory doesn't have an explicit close method yet, but we should ensure
      # that any async operations are properly handled
      await asyncio.sleep(0)  # Allow any pending tasks to complete
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 37
  @pytest.fixture(autouse=True)
  async def agent_isolation(request, test_agent):
      if "agent" in request.keywords:
          # Perform any necessary setup for agent isolation
          yield
          # Perform any necessary cleanup for agent isolation
      else:
          yield
file /home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py, line 20
  @pytest.fixture
  async def test_agent(test_agent_id, test_agent_config, mock_function_manager, mock_llm_provider):
      agent = Agent(
          agent_id=test_agent_id,
          name="Test Agent",
          config=test_agent_config,
          function_manager=mock_function_manager,
          llm_provider=mock_llm_provider
      )
      await agent.initialize()
      yield agent
      await agent.cleanup()
E       fixture 'mock_function_manager' not found
>       available fixtures: _session_event_loop, agent_isolation, anyio_backend, anyio_backend_name, anyio_backend_options, app/api/models::<event_loop>, auth_headers, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cleanup_after_tests, cov, doctest_namespace, event_loop, event_loop_policy, llm_isolation, mock_agent, mock_llm_provider, mock_llm_provider_factory, mock_llm_response, mock_redis_memory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_connection, redis_isolation, redis_memory, run_around_tests, test_agent, test_agent_config, test_agent_id, test_settings, tests/unit/test_async_setup.py::<event_loop>, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/shaun/repos/srt-agentic-api/tests/fixtures/agent_fixtures.py:20
_____________ ERROR at teardown of test_vector_memory_async_setup ______________

    def finalizer() -> None:
        """Yield again, to finalize."""
    
        async def async_finalizer() -> None:
            try:
                await gen_obj.__anext__()  # type: ignore[union-attr]
            except StopAsyncIteration:
                pass
            else:
                msg = "Async generator fixture didn't stop."
                msg += "Yield only once."
                raise ValueError(msg)
    
>       event_loop.run_until_complete(async_finalizer())

../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.pyenv/versions/3.12.5/lib/python3.12/asyncio/base_events.py:687: in run_until_complete
    return future.result()
../../venvs/venv-srt-agentic-api/lib/python3.12/site-packages/pytest_asyncio/plugin.py:333: in async_finalizer
    await gen_obj.__anext__()  # type: ignore[union-attr]
tests/fixtures/async_fixtures.py:27: in cleanup_after_tests
    await close_redis_connections()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    async def close_redis_connections():
        # This function attempts to close all Redis connections
        for task in asyncio.all_tasks():
>           if isinstance(task.get_coro().__self__, Redis):
E           AttributeError: 'coroutine' object has no attribute '__self__'. Did you mean: '__del__'?

tests/fixtures/async_fixtures.py:18: AttributeError
---------------------------- Captured log teardown -----------------------------
INFO     memory:connection.py:66 Redis connection pool closed for agent: 00000000-0000-0000-0000-000000000000

---------- coverage: platform linux, python 3.12.5-final-0 -----------
Name                                         Stmts   Miss  Cover   Missing
--------------------------------------------------------------------------
app/__init__.py                                  0      0   100%
app/api/__init__.py                              0      0   100%
app/api/endpoints/__init__.py                    5      0   100%
app/api/endpoints/agent.py                      62     38    39%   34-44, 58-61, 78-83, 97-99, 110, 126-136, 154-163
app/api/endpoints/function.py                   90     67    26%   27, 45-59, 78-90, 108-120, 138-150, 168-182, 201-215
app/api/endpoints/memory/__init__.py            12      0   100%
app/api/endpoints/memory/add.py                 19     11    42%   38-54
app/api/endpoints/memory/delete.py              17      9    47%   33-45
app/api/endpoints/memory/operate.py             19     11    42%   41-64
app/api/endpoints/memory/retrieve.py            21     13    38%   36-52
app/api/endpoints/memory/search.py              40     26    35%   44-63, 123-161
app/api/endpoints/message.py                    20     11    45%   17-35
app/api/models/__init__.py                       5      0   100%
app/api/models/agent.py                         42      0   100%
app/api/models/function.py                      46      0   100%
app/api/models/memory.py                        74      0   100%
app/api/models/message.py                       29      0   100%
app/config.py                                   47      4    91%   60, 63-93
app/core/__init__.py                             6      0   100%
app/core/agent.py                               72     43    40%   60-86, 103, 112, 121-125, 136-140, 154-158, 170-172, 184-202
app/core/agent_manager.py                       93     69    26%   5, 43-66, 78-83, 102-120, 132-137, 146, 170-174, 192-196, 214-232, 250-259
app/core/agent_types.py                          9      9     0%   1-12
app/core/function_manager.py                    75     56    25%   34-37, 52-62, 77-90, 107-117, 122, 125, 144-169, 184-189
app/core/llm_provider.py                       120     77    36%   57-68, 74, 80, 83-84, 91-116, 125-147, 156-178, 187-211, 218, 222, 226-238, 242-250
app/core/memory/__init__.py                      6      0   100%
app/core/memory/logger.py                        5      0   100%
app/core/memory/memory_interface.py             34      9    74%   12, 17, 22, 27, 32, 37, 42, 47, 52
app/core/memory/memory_operations.py            51     31    39%   31-33, 54-55, 73-74, 91-92, 107-108, 134-149, 160-161, 175-176, 180-181, 188-190
app/core/memory/memory_system.py               128     97    24%   36-44, 47-55, 60-82, 87-102, 105-135, 138-159, 167-183, 186-201, 204-218, 224
app/core/memory/memory_utils.py                 39     24    38%   24, 45-50, 65-66, 80-83, 96-109, 129-132, 148-149, 163-164
app/core/memory/redis/__init__.py                0      0   100%
app/core/memory/redis/cleanup.py                18      8    56%   23-30
app/core/memory/redis/connection.py             86     37    57%   28, 45-53, 61-62, 70-82, 91-100, 104-108
app/core/memory/redis/logger.py                  5      0   100%
app/core/memory/redis/memory_operations.py      46     33    28%   29-42, 57-71, 83-92
app/core/memory/redis/search.py                128    112    12%   29-69, 84-122, 137-175, 191-209, 224-230
app/core/memory/redis_memory.py                 82     46    44%   27-29, 35-37, 43-45, 48-54, 57-62, 65-70, 73-78, 81-86, 89-94
app/core/memory/vector_memory.py               143    113    21%   27-42, 45-76, 79-96, 99-161, 164-169, 172-201, 204-230, 233-242, 245-255
app/core/models/__init__.py                      5      0   100%
app/core/models/agent.py                        36      0   100%
app/core/models/function.py                     11      0   100%
app/core/models/llm.py                          10      0   100%
app/core/models/memory.py                       19      0   100%
app/dependencies.py                              9      3    67%   5, 9, 12
app/main.py                                     82     35    57%   33-57, 77-89, 143, 148-151, 156-157, 165-166, 173-176
app/utils/__init__.py                            4      0   100%
app/utils/auth.py                               28     19    32%   12-29, 35-43
app/utils/logging.py                            26      3    88%   47-49
app/utils/memory.py                              9      4    56%   8-11
--------------------------------------------------------------------------
TOTAL                                         1933   1018    47%

=========================== short test summary info ============================
ERROR tests/integration/test_main.py::test_read_main
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_lifecycle
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_add_and_get
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_search
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_search_relevance
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_delete
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_get_recent
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_get_memories_older_than
ERROR tests/integration/test_redis_memory_integration.py::test_redis_memory_cleanup
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_lifecycle
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_add
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_add_and_get
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_search
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_delete
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_get_recent
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_get_memories_older_than
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_cleanup
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_error_handling
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_search_with_filters
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_search_relevance
ERROR tests/integration/test_vector_memory_integration.py::test_vector_memory_edge_cases
ERROR tests/unit/api/endpoints/test_memory.py::test_add_memory
ERROR tests/unit/api/endpoints/test_memory.py::test_retrieve_memory
ERROR tests/unit/api/endpoints/test_memory.py::test_search_memory
ERROR tests/unit/api/endpoints/test_memory.py::test_memory_router_export
ERROR tests/unit/api/endpoints/test_memory.py::test_invalid_memory_operation
ERROR tests/unit/api/endpoints/test_memory.py::test_missing_agent_id
ERROR tests/unit/api/models/test_message_models.py::test_message_request
ERROR tests/unit/api/models/test_message_models.py::test_function_call
ERROR tests/unit/api/models/test_message_models.py::test_message_response
ERROR tests/unit/api/models/test_message_models.py::test_message_history_request
ERROR tests/unit/api/models/test_message_models.py::test_message_history_item
ERROR tests/unit/api/models/test_message_models.py::test_message_history_response
ERROR tests/unit/api/models/test_message_models.py::test_message_request_validation
ERROR tests/unit/api/models/test_message_models.py::test_message_history_request_validation
ERROR tests/unit/api/test_agent.py::test_create_agent
ERROR tests/unit/api/test_agent.py::test_create_agent_validation_error
ERROR tests/unit/api/test_agent.py::test_create_agent_internal_error
ERROR tests/unit/api/test_agent.py::test_get_agent
ERROR tests/unit/api/test_agent.py::test_update_agent
ERROR tests/unit/api/test_agent.py::test_delete_agent
ERROR tests/unit/api/test_agent.py::test_list_agents
ERROR tests/unit/api/test_function.py::test_register_function - AttributeErro...
ERROR tests/unit/api/test_function.py::test_get_function - AttributeError: 'A...
ERROR tests/unit/api/test_function.py::test_update_function - AttributeError:...
ERROR tests/unit/api/test_function.py::test_delete_function - AttributeError:...
ERROR tests/unit/api/test_function.py::test_list_functions - AttributeError: ...
ERROR tests/unit/api/test_function.py::test_execute_function - AttributeError...
ERROR tests/unit/api/test_function.py::test_execute_nonexistent_function - At...
ERROR tests/unit/api/test_memory.py::test_advanced_search
ERROR tests/unit/api/test_memory.py::test_add_memory
ERROR tests/unit/api/test_memory.py::test_retrieve_memory
ERROR tests/unit/api/test_memory.py::test_search_memory
ERROR tests/unit/api/test_memory.py::test_delete_memory
ERROR tests/unit/api/test_memory.py::test_memory_operation
ERROR tests/unit/api/test_memory.py::test_add_long_term_memory
ERROR tests/unit/api/test_memory.py::test_search_long_term_memory
ERROR tests/unit/api/test_memory.py::test_send_message_invalid_agent
ERROR tests/unit/api/test_message.py::test_send_message
ERROR tests/unit/api/test_message.py::test_get_message_history
ERROR tests/unit/api/test_message.py::test_clear_message_history
ERROR tests/unit/api/test_message.py::test_get_latest_message
ERROR tests/unit/api/test_message.py::test_send_message_invalid_agent
ERROR tests/unit/core/memory/test_memory_system.py::test_memory_system_initialization
ERROR tests/unit/core/memory/test_memory_system.py::test_add_short_term_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_add_long_term_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_retrieve_short_term_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_retrieve_long_term_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_search
ERROR tests/unit/core/memory/test_memory_system.py::test_delete_short_term_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_delete_long_term_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_perform_operation_add
ERROR tests/unit/core/memory/test_memory_system.py::test_consolidate_memories
ERROR tests/unit/core/memory/test_memory_system.py::test_forget_old_memories
ERROR tests/unit/core/memory/test_memory_system.py::test_memory_system_error_handling
ERROR tests/unit/core/memory/test_memory_system.py::test_memory_system_close
ERROR tests/unit/core/memory/test_memory_system.py::test_memory_system_search_with_errors
ERROR tests/unit/core/memory/test_memory_system.py::test_memory_system_partial_search_success
ERROR tests/unit/core/memory/test_memory_system.py::test_add_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_retrieve_memory
ERROR tests/unit/core/memory/test_memory_system.py::test_search_memory
ERROR tests/unit/core/memory/test_redis_connections.py::test_redis_connection_initialization
ERROR tests/unit/core/memory/test_redis_connections.py::test_redis_connection_initialization_retry
ERROR tests/unit/core/memory/test_redis_connections.py::test_redis_connection_initialization_failure
ERROR tests/unit/core/memory/test_redis_connections.py::test_redis_connection_get_connection
ERROR tests/unit/core/memory/test_redis_connections.py::test_redis_connection_ensure_connection
ERROR tests/unit/core/memory/test_redis_connections.py::test_redis_connection_close
ERROR tests/unit/core/memory/test_redis_connections.py::test_redis_connection_too_many_connections
ERROR tests/unit/core/memory/test_redis_memory.py::test_redis_memory_lifecycle
ERROR tests/unit/core/memory/test_redis_memory.py::test_redis_memory_add_and_get
ERROR tests/unit/core/memory/test_redis_memory.py::test_redis_memory_search
ERROR tests/unit/core/memory/test_redis_memory.py::test_redis_memory_delete
ERROR tests/unit/core/memory/test_redis_memory.py::test_redis_memory_get_recent
ERROR tests/unit/core/memory/test_redis_memory.py::test_redis_memory_get_memories_older_than
ERROR tests/unit/core/memory/test_vector_memory.py::test_vector_memory_lifecycle
ERROR tests/unit/core/memory/test_vector_memory.py::test_vector_memory_add_and_get
ERROR tests/unit/core/memory/test_vector_memory.py::test_vector_memory_search
ERROR tests/unit/core/memory/test_vector_memory.py::test_vector_memory_delete
ERROR tests/unit/core/memory/test_vector_memory.py::test_vector_memory_get_recent
ERROR tests/unit/core/memory/test_vector_memory.py::test_vector_memory_get_memories_older_than
ERROR tests/unit/core/memory/test_vector_memory.py::test_vector_memory_error_handling
ERROR tests/unit/core/test_agent.py::test_advanced_search
ERROR tests/unit/core/test_agent.py::test_add_memory
ERROR tests/unit/core/test_agent.py::test_retrieve_memory
ERROR tests/unit/core/test_agent.py::test_search_memory
ERROR tests/unit/core/test_agent.py::test_delete_memory
ERROR tests/unit/core/test_agent.py::test_memory_operation
ERROR tests/unit/core/test_agent.py::test_process_message
ERROR tests/unit/core/test_agent.py::test_execute_function
ERROR tests/unit/core/test_agent.py::test_get_available_functions
ERROR tests/unit/core/test_agent.py::test_add_function
ERROR tests/unit/core/test_agent.py::test_remove_function
ERROR tests/unit/core/test_agent.py::test_get_function_by_name
ERROR tests/unit/core/test_agent.py::test_prepare_prompt
ERROR tests/unit/core/test_agent.py::test_parse_response
ERROR tests/unit/core/test_llm_provider.py::test_llm_provider_fallback
ERROR tests/unit/core/test_llm_provider.py::test_llm_provider_all_fail
ERROR tests/unit/core/test_llm_provider.py::test_llm_provider_first_succeeds
ERROR tests/unit/test_async_setup.py::test_redis_memory_async_setup
ERROR tests/unit/test_async_setup.py::test_vector_memory_async_setup
ERROR tests/unit/test_async_setup.py::test_vector_memory_async_setup - Attrib...
============================= 121 errors in 1.96s ==============================
